注意：
将某些东西声明为 const 可帮助编译器侦测出错误用法。const可被施加于任何作用域内的对象，函数
返回类型，成员函数本体。
编译器强制实施 bitwise constness，但你编写程序时应使用概念上的常量性
当 const 和 non-const 成员函数有着实质等价的实现时，令 non-const 版本调用 const 版本避免
代码重复



const 出现在 * 左边，表示被指物是常量，出现在 * 右边，表示指针自身是常量

const int *a 和 int const * a 是一样的

const vector<int>::iterator it  it是const，*it = 10（正确） ++it（错误）
vector<int>::const_iterator cit *cit = 10(错误) cit++(正确)

 令函数返回一个常量值，往往可以降低因客户错判而造成的意外

 mutable释放 non-static 成员变量的 bitwise constness 约束

 class a
 {
private:
    mutable szie_t l;
 }

 szie_t a::f()const
 {
    l = 5;
 }

