int a = 1;
const int b = 2;

const int *cptr = &a;
const int *cptr = &b; 指向常量的指针，也可指向非常量，不可用通过该指针修改对象的值

int *const cptr = &a;常量指针，该指针不可用修改，将一直指向a
const int *const cptr = &b;指向常量对象的常量指针

顶层const（top-level const）指针本身是个常量
底层const(low-level const)指针所指的对象是个const

constexpr(c++11):
    将变量声明为constexpr由编译器来验证变量的值到底是不是一个常量表达式
    eg:constexpr int a = 10;
    一个constexpr的初始值必须是0，nullptr，或者存储与固定地址的对象：一般函数体内的变量
        并非存放于固定地址，所以不能指向这些变量，只能指向函数体之外的变量，除了定义在函
        数体内的有效范围远超函数体本身的变量（这些变量也可以被constexpr指向）

const int *p = nullptr;
    p是一个指向int类型的指针
    这是low-level const
constexpr int *q = nullptr; 
    q是一个指向int的常量指针
    这是top-level const