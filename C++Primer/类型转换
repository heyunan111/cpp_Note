隐式转换：
    什么时候发生；
        比int类型小的整数型值首先提升为较大的整数类型
        非bool转化为bool
        初始化过程 eg:int a = 3.15; a为3
        算数运算或关系运算中
        函数调用
    算数转换
    整形提升
    其他：
        数组转为指针:
            int ia[10];
            int *p = ia; ia转为指向数组首元素的指针
        指针的转换：
            0或nullptr能转换成任意指针的类型
            指向任意非常量的指针能转成void*
            指向任意对象的指针能 const void*
        
        转为bool
        
        转换为常量：
        int i;
        cosnt int &j = i;
        const int *k = i;

显示转换:
命名的强制转换：
    cast-name<type>(expression);
    type目标类型，如果type是引用类型则结果是左值
    expression要转换的值 
    cast-name 是static_cast,dynamic_cast,const_cast,reinterpret_cast

    static_cast:任何有明确定义的类型转换只要不含底层const就可以用
    eg:
        int j = 10;
	    double b = static_cast<double>(j);

        void *p = &j;
        double *dp = static_cast<double*>(p);

    const_cast:只能改变运算对象的底层const
    eg:
        cosnt char *cp;
        char *p = const_cast<char*>(cp);
    如果变量本身不是一个const，这样做是合法的
    如果变量本身是一个const，这样做会产生未知后果
    



